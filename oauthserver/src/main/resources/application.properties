spring.application.name=oauthserver

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASS}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.show-sql: true
server.port=${SERVER_PORT:9001}
# Logging Configuration
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.com.services.oauthserver=DEBUG

# Spring Cloud Config
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=${EUREKA_SERVER}

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

spring.jackson.default-property-inclusion=NON_NULL
spring.jackson.mapper.default-view-inclusion=false
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false

management.endpoints.web.exposure.include=*


# Thymeleaf Configuration
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

# Spring Security
spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI}

# Debug logging for OAuth2
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG